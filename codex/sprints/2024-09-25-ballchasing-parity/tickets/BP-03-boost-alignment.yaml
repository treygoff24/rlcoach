title: "[rlcoach] Reconcile boost pickup detection with Ballchasing metrics"
type: bugfix
priority: P0
branch: "feature/bp-03-boost-alignment"
repo:
  url: https://github.com/treygoff/rlcoach
  root: .
  paths_in_scope:
    - src/rlcoach/events.py
    - src/rlcoach/analysis/boost.py
    - src/rlcoach/field_constants.py
    - tests/analysis/**
  paths_out_of_scope:
    - src/rlcoach/analysis/movement.py
    - src/rlcoach/analysis/kickoffs.py
context:
  stack: {lang: Python, framework: pytest, runtime: Python 3.10}
  versions: {pytest: "7.x"}
  style_guides: ["codex/docs/gpt5-codex-ticketing-guide.md", "codex/docs/gpt5-prompting-best-practices-guide.md"]
  related_issues: ["codex/sprints/2024-09-25-ballchasing-parity/tickets/BP-01-parity-harness.yaml"]
problem_statement: >
  Boost economy metrics (BPM, amount collected/stolen, zero/100 time, pad counts) diverge sharply from Ballchasing due
  to inaccurate pad attribution and overcounted steals. Refine boost pickup detection using frame-derived pad IDs,
  accurate pre/post boost amounts, and consistent stolen heuristics to match Ballchasing’s numbers.
non_goals:
  - Do not address movement, kickoff, or positioning discrepancies in this ticket.
  - Do not modify replay ingest or parser Rust bindings.
constraints:
  - Keep detection O(n) per replay; no expensive spatial joins beyond pad lookup.
  - Ensure thresholds for zero (<3 boost) and hundred (≥99 boost) are configurable constants.
  - Document stolen classification logic relative to midfield so future maps remain accurate.
artifacts_expected:
  output_mode: diff
  pr_title_template: "[boost] Align pickup detection with Ballchasing metrics"
  pr_body_sections: ["Context", "Implementation", "Tests", "Risks", "Follow-ups"]
  decision_log: true
acceptance_criteria:
  - [ ] Parity harness reports boost metric deltas within ±3% relative error (or ≤5 absolute boost units) for the 0925 replay.
  - [ ] Boost pickup events include pad IDs, pre/post boost amounts, and stolen flags derived from team half checks.
  - [ ] Analyzer recalculates BPM/BCPM using updated pickups and uses documented zero/hundred thresholds.
  - [ ] Add targeted unit tests covering big vs small pad pickups, steals, and overfill/waste calculations.
  - [ ] Update plan doc with finalized boost constants and heuristics.
verification:
  repro_steps: |
    python -m rlcoach.cli report-md Replay_files/0925.replay --out out --pretty
  checks:
    - cmd: "pytest tests/analysis/test_ballchasing_parity.py -q"
    - cmd: "pytest tests/analysis/test_boost.py -q"
workflow_expectations:
  - plan-first
  - implement
  - self-check
  - emit_patch
  - run_verification
  - summarize
codex:
  approvals: on-request
  sandbox: workspace-write
  web_search: false
  progress: brief
  review:
    ask_for_diff_format: unified
  agents_md: true
