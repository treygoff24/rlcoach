title: "[rlcoach] Establish Ballchasing parity harness & player identity plumbing"
type: feature
priority: P0
branch: "feature/bp-01-ballchasing-parity-harness"
repo:
  url: https://github.com/treygoff/rlcoach
  root: .
  paths_in_scope:
    - src/rlcoach/report.py
    - src/rlcoach/utils/**
    - tests/analysis/test_ballchasing_parity.py
    - tests/fixtures/**
    - Replay_files/**
    - codex/plans/**
  paths_out_of_scope:
    - parsers/rlreplay_rust/**
    - assets/replays/**
context:
  stack: {lang: Python, framework: pytest, runtime: Python 3.10, package_manager: pip}
  versions: {pytest: "7.x"}
  style_guides: ["codex/docs/gpt5-codex-ticketing-guide.md", "codex/docs/gpt5-prompting-best-practices-guide.md"]
  related_issues: []
problem_statement: >
  We need a deterministic parity harness that compares rlcoach JSON against Ballchasing CSV exports for our five local
  replays. The harness must normalize player identities (platform-based IDs, sanitized display names) so cross-source
  comparisons are stable, and it should surface metric deltas with clear tolerances to guide analyzer fixes.
non_goals:
  - Do not adjust analyzer logic beyond what is required for identity normalization.
  - Do not modify the Rust parser bridge in this ticket.
constraints:
  - Maintain existing JSON schema contract; no breaking changes to top-level fields.
  - Keep Replay_files data access read-only; the harness must not mutate replay fixtures.
  - Ensure parity helpers are reusable across future analyzer tickets.
artifacts_expected:
  output_mode: diff
  pr_title_template: "[parity] Add Ballchasing comparison harness and identity utilities"
  pr_body_sections: ["Context", "Implementation", "Tests", "Risks", "Follow-ups"]
  decision_log: true
acceptance_criteria:
  - [ ] New `tests/analysis/test_ballchasing_parity.py` loads 0925 Ballchasing CSVs and `out/0925.json`, compares core metrics, and fails with actionable diff output when tolerances are exceeded.
  - [ ] Utility helpers provide stable player IDs using `{platform}:{id}` precedence with sanitized fallback slugs; they are consumed by the report generator so JSON `players` align with Ballchasing data.
  - [ ] Plan doc `codex/plans/0925-ballchasing-parity-plan.md` references the new harness and identity strategy.
  - [ ] Running the parity test after the change highlights the current movement/boost/kickoff gaps (expected failures allowed, but the harness itself must pass setup assertions).
verification:
  repro_steps: |
    python -m rlcoach.cli report-md Replay_files/0925.replay --out out --pretty
  checks:
    - cmd: "pytest tests/analysis/test_ballchasing_parity.py -q"
workflow_expectations:
  - plan-first
  - implement
  - self-check
  - emit_patch
  - run_verification
  - summarize
codex:
  approvals: all
  sandbox: workspace-write
  web_search: true
  progress: brief
  review:
    ask_for_diff_format: unified
  agents_md: true
